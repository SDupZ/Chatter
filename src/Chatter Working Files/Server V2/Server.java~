import java.net.*;
import java.util.*;
import java.io.*;

public class Server implements Runnable {
    
    private ServerSocket serverSocket;
    private HashMap clientHashMap;
    private HashMap callGroupHashMap;
    private Database database;
    private AJPanel panel;
    
    public Server(AJPanel panel) {
        try {
            this.panel = panel;
            clientHashMap = new HashMap();
            serverSocket = new ServerSocket(6677);
            database = new Database(this);
        } catch (IOException e) {
            StackTraceElement[] elements = e.getStackTrace();
            for (int i = 0; i < elements.length; i++) {
                print(elements[i].toString());
            }
        }
    }
    
    public void run() {
        int idCounter = 1000000;
        while(true) {
            Socket tempSocket = null;
            try {
                tempSocket = serverSocket.accept();
                VClient newClient = new VClient(tempSocket, this, idCounter);
                idCounter = idCounter + idCounter / 5 - idCounter / 6;
                clientHashMap.put(newClient.getID(), newClient);
            } catch (Exception e) {
                StackTraceElement[] elements = e.getStackTrace();
                for (int i = 0; i < elements.length; i++) {
                    print(elements[i].toString());
                }
                System.exit(1);
            }
        }   
    }
    
    public void sendAll(Package pack) {
        for (int j = 0; j < pack.getContacts().length; j++) {
            if (clientHashMap.get(pack.getContacts()[j].getID()) != null) {
                ((VClient)clientHashMap.get(pack.getContacts()[j].getID())).send(pack);
            }
        }
    }
    
    public void delete(int id) {
        VClient client = (VClient)clientHashMap.remove(id);
        panel.printInfo(client.toString() + " has disconnected");
        client.setHasLoggedIn(false);
        sendNewContact(client);
        client.setID(-1);
        client = null;
    }
    
    public boolean checkLoginInfo(String info) {
        return database.searchForLogin(info);
    }
    
    public boolean register(String info) {
        return database.registerInfo(info);
    }
    
    public Package contactList(VClient client) {
        String username = client.getUsername();
        int numberRegistered = database.getNumberRegistered(username + ".txt");
        Contact[] contacts = new Contact[numberRegistered];
        int j = 0;
        String userDetail;
        for (int i = 0; i < numberRegistered; i++) {
            if (!(userDetail = database.getUser(username + ".txt", i)).equals(client.getUsername())) {
                contacts[j] = new Contact(userDetail, -1, Contact.NOT_CALLED);
                j++;
            }
        }
        return new Package(Package.CONTACTS, contacts, new byte[0]);
    }
    
    public Package contactListOnline(VClient client) {
        Contact[] contacts = new Contact[clientHashMap.size() - 1];
        Set clientSet = clientHashMap.entrySet();
        Iterator setI = clientSet.iterator();
        int i = 0;
        while(setI.hasNext()) {
            VClient tempClient = (VClient)((Map.Entry)setI.next()).getValue();
            if (tempClient.getID() != client.getID()) {
                contacts[i] = new Contact(tempClient.getUsername(), tempClient.getID(), Contact.NOT_CALLED);
                i++;
            }
        }
        return new Package(Package.CONTACTS, contacts, new byte[0]);
    }
    
    public void sendNewContact(VClient client) {
        Contact[] contact = new Contact[1];
        Package pack = new Package(Package.CONTACTS, contact, new byte[0]);
        Set clientSet = clientHashMap.entrySet();
        Iterator setI = clientSet.iterator();
        int i = 0;
        if (!client.getHasLoggedIn()) {
            int newId = client.getID();
            contact[0] = new Contact(client.getUsername(), -1, Contact.NOT_CALLED);
            while(setI.hasNext()) {
                VClient tempClient = (VClient)((Map.Entry)setI.next()).getValue();
                if (client != tempClient) {
                    tempClient.send(pack); 
                    tempClient.removeFromCallGroup(newId);
                }
                i++;
            }
        } else {
            contact[0] = new Contact(client.getUsername(), client.getID(), Contact.NOT_CALLED);
            while(setI.hasNext()) {
                VClient tempClient = (VClient)((Map.Entry)setI.next()).getValue();
                if (client != tempClient) {
                    tempClient.send(pack); 
                }
                i++;
            }
        }
    }
    
    public void query() {
        panel.printInfo("" + clientHashMap.size());
        Set clientSet = clientHashMap.entrySet();
        Iterator setI = clientSet.iterator();
        int i = 0;
        while(setI.hasNext()) {
            panel.printInfo(((VClient)((Map.Entry)setI.next()).getValue()).toString());
            i++;
        }
    }
    
    public void print(String toScreen) {
        panel.printInfo(toScreen);
    }
}